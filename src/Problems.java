import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.stream.Stream;

/**
 * @ClassName: Problems
 * @author: csh
 * @Description:
 */

public class Problems {


    private static Problems problems = null;
    private static String fileName = null;
    private int departmentNum;      //
    private double width, height;
    private double[][] flow;
    private List<int[]> edges;  //
    private List<Double> flows;  //
    private double[][] areas;
    private double bestCost;
    private String type = ""; //  ratio or side
    private String dist = ""; //  Euclidean or Rectilinear
    private boolean isRect;

    public int getDepartmentNum() {
        return departmentNum;
    }

    public double getWidth() {
        return width;
    }

    public double getHeight() {
        return height;
    }
    //get flow
    public double getFlow(int department1,int department2) {
        return flow[department1][department2];
    }
    public double getFlow(int i) { return flows.get(i); }


    public List<int[]> getEdges() {
        return edges;
    }
    //get flows
    public double getFlows(int i) {
        return flows.get(i);
    }

    public double getAreas(int i ) {
        return areas[i][0];
    }
    public double getRate(int i ) {
        return areas[i][1];
    }

    public double getBestCost() {
        return bestCost;
    }

    public String getType() {
        return type;
    }

    public String getDist() {
        return dist;
    }

    public boolean isRect() {
        return isRect;
    }

    public boolean isValid(int fac, double w, double h) {
        if (type.equals("ratio")) {
            double r = Math.max(w/h,  h/w);
            return r <= areas[fac][1];
        } else {
            double s = Math.min(w,  h);
            return s >= areas[fac][1];
        }
    }

    // to get Problem
    public static Problems getProblem() {
        if (problems == null) {
            try {
                problems = new Problems(fileName);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return problems;
    }


    //to open the file generated by myself
    private Problems(String fileName) throws IOException {
        Problems.fileName = fileName;
        readFile(fileName);
    }


    private void readFile(String fileName) throws IOException, FileNotFoundException {
        FileReader fileReader;
        Scanner scanner;

        fileReader = new FileReader(fileName);
        scanner = new Scanner(fileReader);
        // get data
        departmentNum = scanner.nextInt();
        type = scanner.next();
        dist = scanner.next();
        if (dist.equalsIgnoreCase("Rectilinear")) {
            isRect = true;
        }
        bestCost = scanner.nextDouble();
        width = scanner.nextDouble();
        height = scanner.nextDouble();
        flow = new double[departmentNum][departmentNum];
        areas = new double[departmentNum][2];
        double totalArea = 0;
        // sparse or full
        if (scanner.next().equalsIgnoreCase("sparse")) {
            //sparse
            for (int i = 0; i < departmentNum; i++) {
                scanner.nextInt(); // department id
                areas[i][0] = scanner.nextDouble();  // department area
                areas[i][1] = scanner.nextDouble();   // department ratio
                if (areas[i][1] == 0) {
                    if (type.equals("ratio")) {
                        areas[i][1] = Integer.MAX_VALUE;
                    }
                }
                totalArea += areas[i][0];
            }

            while (scanner.hasNextInt()) {
                int i = scanner.nextInt() - 1;
                int j = scanner.nextInt() - 1;
                flow[i][j] = scanner.nextDouble();
            }

        } else {
            //full
            System.out.println("FULL:");
            for (int i = 0; i < departmentNum; i++) {  //
                scanner.nextInt(); // department id
                //flow : flow=new double[departmentNum][departmentNum];
                for (int i1 = 0; i1 < departmentNum; i1++) {
                    double c = scanner.nextDouble();
                    if (c != 0) {
                        flow[i][i1] = c;
                    }
                }
                areas[i][0] = scanner.nextDouble();  //department area
                areas[i][1] = scanner.nextDouble();  //department ratio
            }
        }

        edges = new ArrayList<>();
        flows = new ArrayList<>();
        for (int i = 0; i < flow.length; i++) {
            for (int j = 0; j < flow[i].length; j++) {
                if (flow[i][j] != 0) {
                    edges.add(new int[]{i, j});
                    flows.add(flow[i][j]);
                }
            }
        }
        scanner.close();
        fileReader.close();
    }


    //to set fileName
    public static void setFileName(String fileName) throws IOException {
        Problems.fileName = fileName;
        problems = new Problems(fileName);
    }

    public String toString() {
        String str = "" + departmentNum + "\n" + bestCost + "\n";
        str += width + "\t" + height + "\n\n";

        for (int i = 0; i < areas.length; i++) {
            str += (i + 1) + "\t" + areas[i][0] + "\t" + areas[i][1] + "\n";
        }

        str += "\n";
        for (int i = 0; i < flow.length; i++) {
            for (int j = i + 1; j < flow[i].length; j++) {
                if (flow[i][j] != 0) {
                    str += (i + 1) + "\t" + (j + 1) + "\t" + flow[i][j] + "\n";
                }
            }
        }


        return str;
    }

    public static void main(String[] args) throws IOException {

        Problems.setFileName("datas/Kang13-old/10AB20-ar04.txt");
        Problems problem = Problems.getProblem();
        System.out.println(problem.toString());  //test data

//      problem.flows.stream().forEach(s-> System.out.print(s+" "));


    }

}

