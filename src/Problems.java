import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.stream.Stream;

/**
 * @ClassName: Problems
 * @author: csh
 * @Description:
 */

public class Problems {

    public static Problems problems =null;
    public static String fileName = null;

    //to open the file generated by myself

    private Problems (String fileName) throws IOException {
            Problems.fileName = fileName;
            readFile(fileName);
    }


    private void readFile(String fileName) throws IOException ,FileNotFoundException {
        FileReader fileReader;
        Scanner scanner;

        fileReader =new FileReader(fileName);
        scanner = new Scanner(fileReader);
        departmentNumber = scanner.nextInt();
        //
        zero=scanner.nextInt();
        layoutHeight = scanner.nextDouble();
        layoutWidth = scanner.nextDouble();
        departmentArea = new double[departmentNumber];

        if(( scanner.next()).endsWith("ratio")) {
            if((scanner.next().endsWith("="))) {
                ratio= scanner.nextInt();
            }
        }else {
            //ratio ?
        }

        for (int i = 0; i < departmentNumber; i++) {
            departmentArea[i]=scanner.nextDouble();
        }
        scanner.close();
        fileReader.close();
        //sort items
        itemsList = new ArrayList<>();
        for (int i = 1; i <= departmentNumber; i++) {
            itemsList.add(new Item(i,departmentArea[i-1]));
        }
         //test itemsList
//        itemsList.stream().forEach(s-> System.out.println(s.getDepartmentId()+":"+s.getDepartmentArea()));


    }

    // to get Problem
    public  static  Problems getProblem()   {
      if(problems==null){
          try {
              problems = new Problems(fileName);
          } catch (IOException e) {
              e.printStackTrace();
          }
      }
      return problems;
    }
    //to set fileName
    public  static  void  setFileName(String fileName) throws IOException {
        Problems.fileName =fileName;
        problems =new Problems(fileName);
    }

    // to String


    @Override
    public String toString() {
        return "Problems{" +
                "departmentNumber=" + departmentNumber +
                ", zero=" + zero +
                ", layoutHeight=" + layoutHeight +
                ", layoutWidth=" + layoutWidth +
                ", ratio=" + ratio +
                ", departmentArea=" + Arrays.toString(departmentArea) +
                '}';
    }

    private  int departmentNumber ; // Number of departments
    private  int zero; // ...
    private  double layoutHeight; //the H of layout area
    private  double layoutWidth; //the W of layout area
    private  int ratio;
    private  double departmentArea[] = null; // facilities area
    private  List<Item> itemsList;


    // fot test
    public static void main(String[] args) throws IOException {


        Problems.setFileName("data/ChoppedPlastic.txt");
        Problems problem = Problems.getProblem();
        System.out.println(problem.toString());  //test data


    }

}

class  Item implements Comparable<Item>{

    private  int departmentId;
    private  double departmentArea;


    public int getDepartmentId() {
        return departmentId;
    }

    public void setDepartmentId(int departmentId) {
        this.departmentId = departmentId;
    }

    public double getDepartmentArea() {
        return departmentArea;
    }

    public void setDepartmentArea(double departmentArea) {
        this.departmentArea = departmentArea;
    }

    public Item(int departmentId, double departmentArea) {
        this.departmentId = departmentId;
        this.departmentArea = departmentArea;
    }

    @Override
    public int compareTo(Item o) {
        return 0;
    }
}
